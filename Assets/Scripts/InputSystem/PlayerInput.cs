//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerController"",
            ""id"": ""2b9e439d-9296-4116-a636-511f317dc303"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c16dff7e-cf70-4a2a-8090-517c6feadf4c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""06d93a14-477f-4f00-8087-6c1ef431d14e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""c0c478cb-f30a-46ad-957e-4b58abfba508"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""15c5ca71-3ac6-4528-acf5-221a605f5787"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kick"",
                    ""type"": ""Button"",
                    ""id"": ""23a9a808-d9c9-474e-ae20-70db5029de8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ultimate1"",
                    ""type"": ""Button"",
                    ""id"": ""6e1dd959-fd41-47ea-8ff9-1731b48fc134"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ultimate2"",
                    ""type"": ""Button"",
                    ""id"": ""f1cc22ba-656d-4331-abb5-04533b39b1cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a967e783-786b-4298-a2c4-96dd696be6a7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8eee7dd1-62ba-42f9-afb1-39c15d101653"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8bfa6694-9135-43dd-9b97-2594188bf808"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2eed015a-49db-43be-b117-dcbac016c7f6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""85280688-0b8c-4a3d-9ec5-f5352b79701e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9446ee70-c2e7-4237-b3a3-9ce34ca61cd3"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce3ed8c9-9b2e-4f4d-b010-b14ce58f406e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""717bccc1-4546-4a19-84b6-bc457a825534"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e3707ac-bef4-4a40-85d4-7e27293aaa45"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c27cce7b-9aff-4d73-ba70-7fb19c313bc6"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ultimate1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfec3f6b-5a7d-4017-acd1-9d339cb616a3"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ultimate2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerController
        m_PlayerController = asset.FindActionMap("PlayerController", throwIfNotFound: true);
        m_PlayerController_Move = m_PlayerController.FindAction("Move", throwIfNotFound: true);
        m_PlayerController_Jump = m_PlayerController.FindAction("Jump", throwIfNotFound: true);
        m_PlayerController_Run = m_PlayerController.FindAction("Run", throwIfNotFound: true);
        m_PlayerController_Punch = m_PlayerController.FindAction("Punch", throwIfNotFound: true);
        m_PlayerController_Kick = m_PlayerController.FindAction("Kick", throwIfNotFound: true);
        m_PlayerController_Ultimate1 = m_PlayerController.FindAction("Ultimate1", throwIfNotFound: true);
        m_PlayerController_Ultimate2 = m_PlayerController.FindAction("Ultimate2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerController
    private readonly InputActionMap m_PlayerController;
    private IPlayerControllerActions m_PlayerControllerActionsCallbackInterface;
    private readonly InputAction m_PlayerController_Move;
    private readonly InputAction m_PlayerController_Jump;
    private readonly InputAction m_PlayerController_Run;
    private readonly InputAction m_PlayerController_Punch;
    private readonly InputAction m_PlayerController_Kick;
    private readonly InputAction m_PlayerController_Ultimate1;
    private readonly InputAction m_PlayerController_Ultimate2;
    public struct PlayerControllerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerControllerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerController_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerController_Jump;
        public InputAction @Run => m_Wrapper.m_PlayerController_Run;
        public InputAction @Punch => m_Wrapper.m_PlayerController_Punch;
        public InputAction @Kick => m_Wrapper.m_PlayerController_Kick;
        public InputAction @Ultimate1 => m_Wrapper.m_PlayerController_Ultimate1;
        public InputAction @Ultimate2 => m_Wrapper.m_PlayerController_Ultimate2;
        public InputActionMap Get() { return m_Wrapper.m_PlayerController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControllerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControllerActions instance)
        {
            if (m_Wrapper.m_PlayerControllerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnJump;
                @Run.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnRun;
                @Punch.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnPunch;
                @Punch.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnPunch;
                @Punch.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnPunch;
                @Kick.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnKick;
                @Kick.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnKick;
                @Kick.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnKick;
                @Ultimate1.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnUltimate1;
                @Ultimate1.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnUltimate1;
                @Ultimate1.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnUltimate1;
                @Ultimate2.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnUltimate2;
                @Ultimate2.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnUltimate2;
                @Ultimate2.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnUltimate2;
            }
            m_Wrapper.m_PlayerControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Punch.started += instance.OnPunch;
                @Punch.performed += instance.OnPunch;
                @Punch.canceled += instance.OnPunch;
                @Kick.started += instance.OnKick;
                @Kick.performed += instance.OnKick;
                @Kick.canceled += instance.OnKick;
                @Ultimate1.started += instance.OnUltimate1;
                @Ultimate1.performed += instance.OnUltimate1;
                @Ultimate1.canceled += instance.OnUltimate1;
                @Ultimate2.started += instance.OnUltimate2;
                @Ultimate2.performed += instance.OnUltimate2;
                @Ultimate2.canceled += instance.OnUltimate2;
            }
        }
    }
    public PlayerControllerActions @PlayerController => new PlayerControllerActions(this);
    public interface IPlayerControllerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnPunch(InputAction.CallbackContext context);
        void OnKick(InputAction.CallbackContext context);
        void OnUltimate1(InputAction.CallbackContext context);
        void OnUltimate2(InputAction.CallbackContext context);
    }
}
